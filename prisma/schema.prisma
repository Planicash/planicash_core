// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================================
// AUTH MODELS
// ========================================

model User {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  library          Library[]
  libraryMembers    LibraryMember[]
  forms            Form[]
  incomes          Income[]
  budgets          Budget[]
  paymentMethods   PaymentMethod[]
  savingsGoals     SavingsGoal[]
  transactions     Transaction[]

  @@map("users")
}

// ========================================
// GENERAL MODELS
// ========================================

model PaymentMethod {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  name        String   @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model SavingsGoal {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  name         String   @db.VarChar(255)
  targetAmount Decimal  @map("target_amount") @db.Decimal(12, 2)
  targetDate   DateTime? @map("target_date") @db.Date
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributions  SavingsContribution[]

  @@map("savings_goals")
}

model SavingsContribution {
  id              Int      @id @default(autoincrement())
  goalId          Int      @map("goal_id")
  amount          Decimal  @db.Decimal(12, 2)
  contributionDate DateTime @map("contribution_date") @db.Date
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  goal SavingsGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("savings_contributions")
}

model Income {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  title      String   @db.VarChar(255)
  amount     Decimal  @db.Decimal(12, 2)
  incomeDate DateTime @map("income_date") @db.Date
  notes      String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("incomes")
}

model Budget {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  libraryId     Int?     @map("library_id")
  category     String   @db.VarChar(100)
  monthlyLimit Decimal  @map("monthly_limit") @db.Decimal(12, 2)
  month        Int
  year         Int
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  library Library? @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

// ========================================
// MODULE MODELS
// ========================================

model Library {
  id          Int      @id @default(autoincrement())
  ownerId     Int      @map("owner_id")
  name        String   @db.VarChar(255)
  description String?  @db.Text
  isShared    Boolean  @default(false) @map("is_shared")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  owner         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members       LibraryMember[]
  accounts      Account[]
  budgets       Budget[]
  transactions  Transaction[]

  @@map("library")
}

model LibraryMember {
  id         Int      @id @default(autoincrement())
  libraryId   Int      @map("library_id")
  userId     Int      @map("user_id")
  permission Permission
  invitedAt  DateTime @default(now()) @map("invited_at")

  // Relations
  library Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("library_members")
}

model Account {
  id           Int      @id @default(autoincrement())
  libraryId     Int      @map("library_id")
  titleAccount String   @map("title_account") @db.VarChar(255)
  formId       Int?     @map("form_id")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  library Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  form   Form?  @relation(fields: [formId], references: [id], onDelete: SetNull)

  @@map("accounts")
}

model Form {
  id             Int      @id @default(autoincrement())
  userId         Int      @map("user_id")
  name           String   @db.VarChar(255)
  description    String?  @db.Text
  definitionJson Json     @map("definition_json")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts Account[]

  @@map("forms")
}

model Transaction {
  id              Int           @id @default(autoincrement())
  userId          Int           @map("user_id")
  libraryId        Int?          @map("library_id")
  transactionDate DateTime      @map("transaction_date") @db.Date
  description     String?       @db.VarChar(255)
  category        String?       @db.VarChar(100)
  amount          Decimal       @db.Decimal(12, 2)
  type            TransactionType
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  library Library? @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// ========================================
// ENUMS
// ========================================

enum Permission {
  read
  edit
}

enum TransactionType {
  income
  expense
} 
